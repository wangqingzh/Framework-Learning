1、下载框架包
2、搭建环境
	导入基础包：（5+1）
			 spring-aop.jar				开发AOP特性时需要的jar
			 spring-beans.jar			处理Bean的jar 		<bean>
			 spring-context.jar			处理sping上下文的jar	<context>
			 spring-core.jar			spring核心jar
			 spring-expression.jar		spring表达式
			   第三方日志包commons-logging	日志
3、编写配置文件
	提示、自动生成配置信息：给eclipse增加插件 spring tool suite
	或者直接下载集成sts的eclipse
	新建bean configuration	applicationContext.xml

4、开发Spring（ioc）程序
	IOC（控制反转）：将创建对象、属性值的方式进行了反转，从new、setXxx()反转为了从SpringIOC容器getBean()
	DI（依赖注入）：将属性值注入给了属性，将属性注入给了bean，将bean注入给了ioc容器
	总结：ioc/di 无论要什么对象，都可以直接去springioc容器中获取，而不需要自己操作（new setXxx()）
	步骤：
		1、先给SpringIOC中存放对象并赋值	
		2、拿
	
	依赖注入：
	IOC容器赋值：如果是简单类型（8个基本类型+String） 字面值 value 
			      对象类型  ref="需要引用的id" 实现了对象与对象之间的依赖
	context.getBean(需要获取的bean的id值)
	依赖注入的三种方式：
		1、set注入：通过setXxx()方法赋值
			依赖注入的底层是反射实现的 <property...>
		2、构造器注入：通过构造方法赋值
			<constructor-arg...> 必须与构造方法中的参数一一对应
		3、P命名空间注入
			p:属性名="属性值"
			引用类型（除String外）
			p:属性名-ref="引用的id"
		4、自动装配（约定优于配置）
			只适用于ref引用类型 不适用于简单类型
			全局默认自动自动装配<beans default-autowire="byName" ></beans>		子标签可可覆盖方式
			<bean ... autowire="default/byName/byType/constructor/no"></bean>
			no：默认情况  不使用自动装配 即<beans/>、bean>都未声明状态 
			default：继承上级标签<beans />
			byName：根据属性的名称自动装配 <property name="xxx" /> --> <bean id="xxx"></bean>
			byType：根据属性的数据类型Type自动装配 	--> <bean ... class="xxx.xxx.xxx"></bean>
			constructor根据构造函数的数据类型 进行byType模式的自动装配 测试知 仅设置需ref的属性的构造方法即可
			
		5、注解（通过注解的形式 将bean以及相应的属性值 放入ioc容器）
			applicationContext.xml 增加声明
			<!-- 通知Spring扫描指定包下所有Bean类 进行注解解析 -->
			<context:component-scan base-package="com.wangqing.beans"></context:component-scan>
			@Component("")细化：
				@Repository("")		dao层
				@Service("")		service层
				@Controller("")		控制器层
			@Autowired
			@Resource
			
	注意：String/int/short/long 使用name/type属性进行区分
	String赋null	
		<property name=""><null/></property>
		String浮空字符串
		<property name="xxx" value=""></property>
	注意：在IOC中定义bean
		若使用<property/>标签		该bean的类 必须提供 无参构造
		若使用<constructor/>标签	该bean的类 可不提供无参构造 但是bean类属性与<constructor name="属性">必须一一对应

5、使用注解实现事务（声明式事务）
	a.导入jar包
		spring-tx.jar
		spring-jdbc.jar
		jdbc				驱动包
		commons-dbcp.jar	连接池使用到数据源
		commons-pool.jar	连接池
		aopalliance.jar
	b.配置数据库
		<!-- 3、配置数据库相关 -->
		<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
			<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
			<property name="url" value=""></property>
			<property name="username" value=""></property>
			<property name="password" value=""></property>
			<property name="maxIdle" value=""></property>
		</bean>
		
		<!-- 2、配置事务管理器txManager -->
		<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		<!-- 1、增加对事物的支持（核心） -->
		<tx:annotation-driven transaction-manager="txManager" />
	c.使用
		将需要成为事务的方法 前增加@Transactional

6、AOP 面向切面编程
	普通类-->特殊功能类	a.继承类	b.实现接口	 c.注解		d.配置
	类-->通知
	一、继承类实现通知
		前置通知：org.springframework.aop.MethodBeforeAdvice
		后置通知：org.springframework.aop.AfterReturningAdvice
		环绕通知：org.aopalliance.intercept
		异常通知：org.springframework.aop.ThrowsAdvice
			前置通知实现步骤：
				a.导入jar包
					aopaliance.jar
					aspectjweaver.jar
				b.配置
					<!-- 配置前置通知 -->
					<!-- addStudent()所在类 -->
					<bean id="printStudent" class="com.wangqing.service.StudentService">
						<property name="student" ref="student"></property>
					</bean>
					<!-- 配置通知类 -->
					<bean id="logBefore" class="com.wangqing.aop.LogBefore"></bean>
					<!-- 将printStudent()与logBefore()通知关联 -->
					<aop:config>
						<!-- 配置切入点 -->
						<!-- 配置切入点（在哪里执行通知） -->
						<aop:pointcut expression="execution(public void com.wangqing.service.StudentService.printStudent())" id="pointcut"/>
						<!-- advisor：相当于 连接 切入点和切入面的线 -->
						<aop:advisor advice-ref="logBefore" pointcut-ref="pointcut"/>
					</aop:config>
				c.编写
					aop：每当执行printStudent()之前 自动执行一个方法before()
					printStudent();	业务方法
					before();	自动执行的通知，即aop前置通知
			后置通知实现步骤：
				a.通知类  普通实现接口
				b.业务类  业务方法
				c.配置
					将业务类 通知 纳入SpringIOC容器
					定义切入点（一端）、定义通知类（另一端），通过pointcut-ref将两端连接起来
			异常通知实现步骤：
				根据异常通知接口的定义可以发现，异常通知的显现类 必须编写以下方法
				public void afterThrowing([Method, args, target], ThrowableSubclass)
			环绕通知实现步骤：
				在目标方法的前后、异常发生时、最终等各个地方都可以 进行通知 最强大的一个通知 可以获取
				目标方法的全部控制权（目标方法是否执行、执行之前、执行之后、参数、返回值）
				环绕通知底层是拦截器
	二、注解实现 通知
		@Aspect @Pointcut @Before @AfterReturning @Around @AfterThrowing @After
		a.导入jar包
			与实现接口相同
		b.配置
			将业务类、通知纳入SpringIOC容器
			开启注解对AOP的支持<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		c.编写
		d.注意
			通过注解形式将对象增加到IOC容器时 需要设置 扫描器
			扫描器会将指定包中的@Componet @Service @Respository	@Controller修饰的类产生的对象增加到IOC容器中
			@Aspect不需要加入扫描器 只需要开启即可
			通过注解形式 实现AOP 如果想获取目标对象一些参数 则需要使用一个对象：JoinPoint
			形如
				@AfterReturning(pointcut="execution(public void com.wangqing.service.StudentService.printStudent())", returning="returningValue")
				public void myAfter(JoinPoint jp, Object returningValue) {
					System.out.println("来自注解的后置通知");
				}
			注解形式实现AOP时，通知方法的参数不能多不能少
	三、通过 配置 类-->通知 基于schema 类似于实现于接口的方式
		a.编写一个普通类 （无需实现接口）
		b.将该类通过配置转为一个通知
		c.配置
			目标类和通知类 注入IOC容器
			<aop:config>
				切入点
				<aop:pointcut expression="" pointcut=""></aop:pointcut>
				切入面的类、方法、连接
				<aop:aspect ref="切入面类">
					连接线：连接业务 和 通知
					<aop:xxx method="通知方法" pointcut-ref="切入点" />
				</aop:aspect>
			<aop:config>
			
			
	注意：
		如果获取目标对象的信息
		注解、schema： JoinPoint 返回值要声明
		接口：Method method, Object[] args, Object target, Exception ex
7、Spring开发Web项目
		Web项目初始化SpringIOC容器
			当服务器（tomcat）启动时，通过监听器将SpringIOC容器初始化一次
			监听器：监听tomcat是否启动，一旦启动，立刻实例化一个IOC容器（Spring-web.jar已提供该监听器）
		实现：
			导入基础包（6个）+Spring-web.jar包
			Web项目启动时，会自动加载web.xml，因此需要在web.xml中加载监听器（ioc初始化）
			<context-param>
				<param-name>contextConfigLocation</param-name>
			    <param-value>
		  			classpath:applicationContext.xml,
		  			classpath:applicationContext-*.xml
		  		</param-value>
		  	</context-param>
		  	<listener>
		    	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
		  	</listener>
		  	默认该监听器会读取WEB-INF/下的applicationContext.xml（名称不可改） 可利用context-param标签进行修改默认xml位置
		注意：web项目的jar包是存入到WEB-INF/lib中

8、拆分配置文件
	java项目：
		applicationContext.xml
	Web项目：
		根据什么拆分？
		三层结构
			UI(HTML/CSS/JSP Servlet) applicationController.xml
			Service applicationServlet.xml
			Dao applicationDao.xml
			公共 数据库 applicationDB.xml
		功能结构
			学生相关配置	applicationContextStudent.xml
			班级相关配置	applicationContextClass.xml
		Web项目合并xml
			（1）、web.xml一一导入
			（2）、通配符*（推荐）
			（3）、主配置文件中引用<import resource="" />
	