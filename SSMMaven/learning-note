1、maven的作用
	a.jar包
        i.增加第三方Jar   (commons-fileupload.jar   commons-io.jar)
        ii.jar包之间的依赖关系 （commons-fileupload.jar 自动关联下载所有依赖的Jar，并且不会冲突）
    b.将项目拆分成若干个模块

2、Maven概念：
	是一个基于Java平台的 自动化构建工具
	make-ant-maven-gradle

    清理：删除编译的结果，为重新编译做准备。
    编译：java->class
    测试： 针对于 项目中的关键点进行测试，亦可用 项目中的测试代码 去测试开发代码；
    报告：将测试的结果 进行显示
    打包： 将项目中包含的多个文件 压缩成一个文件， 用于安装或部署。 （java项目-jar、web项目-war）
    安装：将打成的包  放到  本地仓库，供其他项目使用。
    部署：将打成的包  放到  服务器上准备运行。
	
    自动化构建工具maven：将原材料（java、js、css、html、图片）--> 产品（可发布项目）

    编译-打包-部署-测试  -->  自动构建

    依赖：
        commons-fileupload.jar --> commons-io.jar
        A中的某些类需要使用B中的某些类，则称为A依赖于B
        在maven项目中，如果要使用一个当时存在的Jar或模块，则可以通过依赖实现（去本地仓库、中央仓库去寻找）



3、配置maven
	a.配置JAVA_HOME
	b.配置MAVEN_HOME 或者 M2_HOME
        D:\apache-maven-3.5.3\
	c.配置path
		%MAVEN_HOME%\bin	
	d.验证
		mvn -v

4、使用maven
	a.约定 优于 配置 
        硬编码方式：job.setPath("d:\\abc") ;
        配置方式：conf.xml  <path>d:\\abc</path>
        约定：使用默认值d:\\abc
		
	b.maven约定的目录结构：
		project
		-src				
			--main			：程序功能代码
				--java		 java代码  (Hello xxx)
				--resources      资源代码、配置代码
			--test			：测试代码
				--java			
				--resources	
	        pom.xml
	c.gav	
        <groupId>域名翻转.大项目名</groupId>
        <groupId>org.lanqiao.maven</groupId>

        <artifactId>子模块名</artifactId>
        <artifactId>HelloWorld</artifactId>

        <version>版本号</version>
        <version>0.0.1-SNAPSHOT</version>

    
    d.maven常见命令
        注：i.第一次执行命令时，因为需要下载执行该命令的基础环境，所以会从中央仓库下载该环境到本地仓库
            ii.运行mvn命令，必须在pom.xml文件所在目录
        mvn compile     只编译main目录中的java文件
        mvn test        测试
        mvn package     打成jar/war
        mvn install     将开发的模块 放入本地仓库，供其他模块使用 （放入的位置 是通过gav决定）
        mvn clean       删除target目录（删除编译文件的目录）

    e.支持jdk1.8
      <profile>
        <id>jdk-1.8</id>
        <activation>
          <activeByDefault>true</activeByDefault>
          <jdk>1.8</jdk>
        </activation>
        <properties>
          <maven.compiler.source>1.8</maven.compiler.source>
          <maven.compiler.target>1.8</maven.compiler.target>
          <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
        </properties>
      </profile>

5、依赖
  a.依赖的范围、依赖的有效性
        compile(默认)  test  provided
    编译	   √	         ×	    √
    测试	   √	         √	    √
    部署	   √	         ×    	×
    Maven在编译、测试、运行项目时，各自使用一套classpath
  
  b.依赖排除
   A.jar -> B.jar
  当我们通过maven引入A.jar时，会自动引入B.jar
	  A.jar(x.java ,y.java,z.java)     B.jar(p.java  c.java  i.java)
		A.jar和B.jar之间的 依赖的本质：z.java ->c.java
   <!-- 排除依赖 beans -->
    <exclusions>
      <exclusion>
        <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
      </exclusion>
    </exclusions>
	
  c.依赖的传递性
    A.jar --> B.jar --> C.jar
    要使 A.jar --> C.jar：当且仅当B.jar依赖于C.jar的范围是compile

    多个maven项目（模块）之间如何 依赖： p项目 依赖于->q项目
    1.  p项目 install 到本地仓库
    2.  q项目 依赖：
        <!-- 本项目  依赖于HelloWorld2项目 -->
        <dependency>
          <groupId>org.lanqiao.maven</groupId>
            <artifactId>HelloWorld2</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

  d.依赖原则：为了防止冲突
    1.路径最短优先原则
    2.路径长度相同：
      i.在同一个pom.xml文件中有2个相同的依赖（覆盖）：后面声明的依赖 会覆盖前面声明的依赖 （严禁使用本情况，严禁在同一个pom中声明2个版本不同的依赖）
      ii.如果是不同的 pom.xml中有2个相同的依赖（优先）：则先声明的依赖 ，会覆盖后声明的依赖



6、maven生命周期:
  生命周期和构建的关系：
  生命周期中的顺序：a b c d e 
  当我们执行c命令，则实际执行的是 a b c 

  生命周期包含的阶段：3个阶段
    clean lifecycle ：清理
      pre-clean  clean  post-clearn

    default lifecycle ：默认(常用)
      
    site lifecycle：站点
      pre-site   site   post-site site-deploy

7、继承
8、聚合

9、pom.xml
  <properties>
      <!-- 统一编码 -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- 统一版本 -->
      <lanqiao.World.junit.version>4.0</lanqiao.World.junit.version>      
  </properties>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${lanqiao.World.junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  父工程pom.xml
  <dependencyManagement>
   <dependencies>
     <dependency>
       <groupId></groupId>
       <artifactId></artifactId>
     </dependency>
   </dependencies>
  </dependencyManagement>
  
10、热部署













	
